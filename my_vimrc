if &t_Co >2 || has("gui_running")
        syntax on
        set hlsearch
endif

if &term=="xterm"
        set t_Co=8
        set t_Sb=^[[4%dm
        set t_Sf=^[[3%dm
endif

"显示文件的编码
set encoding=utf-8
"set encoding=prc
set termencoding=&encoding
set fileencoding=utf-8
set fileencodings=utf-8,gbk,gb2312,gb18030

"选中的行会高亮
set cursorline
"搜索忽略大小写
set ignorecase smartcase
"关闭vi兼容模式
set nocompatible
"显示行号
set nu
"命令打开文件类型检测功能，它相当于文件类型检测功能的开关
filetype on
"filetype off                  " required
"语法高亮
syntax on
"自动缩进
set autoindent
"table键盘4空格
set sw=4
set tabstop=4
set softtabstop=4
set expandtab
autocmd FileType make set noexpandtab
"当使用移动(shift)命令时移动的字符数
set shiftwidth=4

"开启实时搜索功能
set incsearch
"忽略搜索小写功能
set ignorecase
"增强模式中的命令行自动完成操作,可以在命令行下Tab键给出命令列表
set wildmenu
set wildmode=longest:list,full
"高亮搜索
set hlsearch
"显示状态栏
set laststatus=2
"显示尺标
set ruler

" fold基于缩进或语法进行代码折叠
set foldmethod=syntax
set foldmethod=indent
set foldlevel=100
"启动 vim 时关闭折叠代码
set nofoldenable

"set mouse=i
set mouse=""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" alternatively, pass a path where Vundle should install plugins
" let path = '~/some/path/here'
" call vundle#rc(path)

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'

"接下来是要安装的插件
""格式1：Github上其他用户的仓库（非vim-scripts账户里的仓库，所以要加Github用户名）
"Plugin 'tpope/vim-fugitive'
"Plugin 'tpope/vim-rails.git'
"格式2：vim-scripts里面的仓库，直接打仓库名即可。
Plugin 'scrooloose/nerdtree'
Plugin 'Tagbar'
Plugin 'rosenfeld/conque-term'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'OmniCppComplete'
Plugin 'kien/ctrlp.vim'
Plugin 'grep.vim'
Plugin 'tomasr/molokai'
Plugin 'ervandew/supertab'
Plugin 'terryma/vim-multiple-cursors'
" Bundle 'Lokaltog/vim-easymotion'
"Plugin 'bling/vim-airline'
" Plugin 'mbbill/echofunc'

"格式3：非Github的Git仓库
"Plugin 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'

"最后在所有Plugin命令后面加上文件类型检测：
filetype plugin indent on
" Tagbar
" autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx,*.C call tagbar#OpenWindow
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tagbar_autoclose=0
let g:tagbar_width=30
let g:tagbar_autofocus = 1
map tb :TagbarToggle<CR>

" MiniBufExplorer
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMoreThanOne = 1

" NERDTree
let g:NERDTree_title="[NERDTree]"
"let g:winManagerWindowLayout="NERDTree|TagBar"

function! NERDTree_Start()
    exec 'NERDTree'
endfunction

function! NERDTree_IsValid()
    return 1
endfunction
 map nt :NERDTreeToggle<CR>

let NERDTreeQuitOnOpen=0 "打开文件时关闭树
let NERDTreeShowBookmarks=1 "显示书签
let NERDTreeChDirMode=2  "选中root即设置为当前目录
let NERDTreeMinimalUI=1 "不显示帮助面板
let NERDTreeDirArrows=0 "目录箭头 1 显示箭头  0传统+-|号

" OmniCppComplete
" set nocp
" filetype plugin on
" set completeopt=menu,longest

"set cscopeprg=gtags-cscope
set csprg=/usr/local/bin/gtags-cscope
"nmap ct :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
nmap ct :!find . -name "*.[C h]" > gtags.files & gtags
set nocst
nmap <C-[>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-[>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-[>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-[>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-[>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-[>d :cs find d <C-R>=expand("<cword>")<CR><CR>
set csto=0
" set cst
set nocsverb
set cscopequickfix=s-,c-,d-,i-,t-,e-
if filereadable("GTAGS")
    cs add GTA<C-w k>S
endif
set csverb

" color scheme
set t_Co=256
colo molokai
let g:molokai_original = 1
let g:rehash256 = 1
" hilight function name
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>[^()]*)("me=e-2
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>\s*("me=e-1
set runtimepath^=~/.vim/bundle/ctrlp/bundle/ctrlp.vim
hi cfunctions ctermfg=81

let g:ctrlp_match_window ='bottom,order:btt,min:1,max:15,results:100'

" grep
let Grep_Default_Filelist = '*.c *.cpp *.cc *.C *.h *.hpp *.asm'
let Grep_Skip_Files = '*.bak *~ tags .out'

let g:SuperTabDefaultCompletionType = "<c-n>"

" airline
"let g:airline#extensions#whitespace#enabled = 0
"set laststatus=2
"set laststatus=4
"let g:airline_theme='dark'

imap <C-b> <C-x><C-p>
map <C-Left> :bp<CR>
map <C-Right> :bn<CR>
map <s-h> :bp<CR>
map <s-l> :bn<CR>

nmap cw <C-w>j
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

set fo-=r
set noautoindent
set pastetoggle=<F10>
set statusline=%h%w%r\ %f\ %m%=\ %B\ \|\ %{&ff}\ \|\ %{&fenc!=''?&fenc:&enc}\ \|\ %{&ft!=''?&ft:'none'}\ \|\ %{&tabstop}\ %8(%l,%v%)\ %10(%p%%,%P%)

" ConqueTerm
map ct :ConqueTermSplit bash<CR>
